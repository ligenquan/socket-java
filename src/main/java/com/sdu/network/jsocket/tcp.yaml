一: TCP协议

  TCP协议是传输层协议, 提供一种面向连接、面向流的可靠服务. 在TCP协议中有四个重要的东西:

    1: Sequence Number包的序号, 用于解决网络包乱序问题

    2: Acknowledgement Number包确认序号, 用于解决不丢包的问题

    3: Advertised-Window滑动窗口, 用于解决流控

    4: TCP Flag是TCP包类型, 用于操控TCP的状态机

二: TCP三次握手/四次挥手[三次握手四次挥手.jpg]

  1: 三次握手[原因]

    初始化Sequence Number的初始值, 通信的双方要互相通知对方自己的初始化的Sequence Number(全称Synchronize Sequence Numbers,

    简写SYN). 初始的SYN作为后期数据通信的序号以保证应用层接收到的数据不会因为网络上的传输的问题而乱序

  2: 四次挥手[原因]

    TCP是全双工, 故发送方和接收方都需Fin和Ack, 只不过有一方是被动的, 所以就成了所谓的4次挥手.

    如果两边同时断连接那就会就进入到CLOSING状态, 然后到达TIME_WAIT状态[参见示意图: 四次挥手.png].

  Note:

    1: SYN连接超时

      如果Server端接到client发的SYN后回了SYN-ACK后Client掉线, 则Server端收不到Client的ACK, 那么这个连接处于一个中间状态:

      即没成功也没失败. 于是Server端如果在一定时间内没有收到ACK, 则TCP会重发SYN-ACK. Linux默认重试次数为5次, 重试间隔时间从

      1s开始每次都翻倍, 则5次重试时间间隔为1s, 2s, 4s, 8s, 16s, 总共31s，第5次发出后还要等待32s才可知道第5次也超时.

      所以总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = 63s, TCP才会把断开这个连接.

    2: SYN攻击

      所谓SYN Flood攻击是指向服务器发送SYN后就下线, 于是服务器需要默认等63s才会断开连接.

      这样攻击者就可把服务器的SYN连接队列耗尽, 导致不处理处理正常的连接.

      Linux中tcp_syncookies参数用来应对SYN Flood攻击:

      当SYN队列满了, TCP会通过源地址端口、目标地址端口和时间戳构造一个特别的Sequence Number发回去(又叫cookie),

      如果是攻击者则不会有响应, 如果是正常连接则会把这个SYN Cookie发回来, 然后服务端可以通过cookie建连接

      请注意:

        千万别用tcp_syncookies来处理正常的大负载的连接的情况, 因为synccookies是妥协版的TCP协议。

        对于正常的请求应该调整三个TCP参数可:

          1': tcp_synack_retries

            减少重试次数

          2': tcp_max_syn_backlog

            增大SYN连接数

          3: tcp_abort_on_overflow

            处理不过来干脆就直接拒绝连接了


三: TCP滑动窗口机制

  简单的确认重发机制(发送方发出一个数据后就停下来等待对方的确认)效率低下, 滑动窗口允许发送方可连续发送多个数据, 然后等待接收方的确认:

  1：TCP数据根据状态划分为三种类型:

    已发送、待发送以及发送中

  2: 窗口的大小决定了数据传输的效率, 窗口的大小需根据网络实时情况来决定