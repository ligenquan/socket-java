一: 概念说明

  1: 用户空间和内核空间

    操作系统的核心是内核, 独立于普通的应用程序, 可以访问受保护的内存空间且有访问底层硬件设备的所有权限. 为保证用户进程不能直接操作内核,

    操作系统将虚拟空间划分为两部分: 一部分为内核空间, 一部分为用户空间. 针对Linux操作系统而言:

    1': 将最高的1G字节(从虚拟地址0xC0000000至0xFFFFFFFF)供内核使用, 称为内核空间

    2': 将较低的3G字节(从虚拟地址0x00000000至0xBFFFFFFF)供用户进程使用, 称为用户空间

  2: 进程切换

    为了控制进程的执行, 内核必须有能力挂起正在CPU上运行的进程, 并恢复以前挂起的某个进程的执行, 这种行为被称为进程切换[进程切换很耗资源].

    从一个运行的进程转为另一个进程运行, 要经历如下变化:

    1': 保存处理机上下文, 包括程序计数器和其他寄存器

    2': 更新PCB信息

    3': 把进程的PCB移入相应的队列, 如就绪、在某事件阻塞等队列

    4': 选择另一个进程执行并更新其PCB

    5': 更新内存管理的数据结构

    6': 恢复处理机上下文

  3: 进程的阻塞

  4: 文件描述符fd

  5: 缓存IO

二: Linux IO模型

  1: 同步IO模型

    1': 阻塞IO

      同步阻塞IO模型是最常用的一个模型, 也是最简单的模型. 在Linux中默认情况下所有的socket都是blocking, 流程如图所示:

      应用进程                                    内核
                        System call
      recvfrom    ----------------------->  no ready data    ------+
                                                |                   |
                                                |                   | wait data
                                                |                   |
                                               \|/                  |
                                            ready data        ------+
                                                |                   |
                                                |                   | copy data from kernel
                                                |                   | to user space
                        Return                 \|/            ------+
      handle data <----------------------   copy finsh

      描述:

      用户进程调用系统调用recv()/recvfrom(), 内核开始IO的第一个阶段: 准备数据(对于网络IO来说, 数据尚未到达则内核需等待数据的到来)

      也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的, 而在用户进程会被阻塞; 第二个阶段: 当内核把数据准备好, 它就会将数据从

      内核拷贝到用户内存并返回结果, 用户进程才解除BLOCK状态且重新运行

    2': 非阻塞IO

      用户进程调用系统调用recvform, 进程不被阻塞且内核马上返回给进程: 如果数据还没准备好则内核返回ERROR, 然后再发起recvform系统调用

      重复上面的过程循环往复的进行recvfrom系统调用, 这个过程通常被称之为轮询。

      轮询检查内核数据是否准备好, 当内核准备好数据则将据拷贝进程进行数据处理, 需要注意: 拷贝数据整个过程进程属于阻塞的状态

      在linux下, 可通过设置socket为non-blocking, 当对non-blocking socket执行读操作时, 流程如图所示:

                           应用进程                                     内核
                  +-----                      System call
                  |         recvfrom    ------------------------>   no ready data ----+
                  |                           EWOULDBLOCK                             |
                  |                     <------------------------                     |
                  |                                                                   |
                  |                            System call                            |
                  |         recvfrom    ------------------------>   no ready data     |  wait data(轮询)
                  |                           EWOULDBLOCK                             |
      repeat call |                     <------------------------                     |
      recvfrom and|                                                                   |
      wait success|                             System call                           |
                  |          recvfrom   ------------------------>   ready data   -----+
                  |                                                                   |
                  |                                                 copy data         |
                  |                                                     |             | copy data from kernel
                  |                                                     |             | to user space
                  |                                                     |             |
                  |                            Return Success          \|/            |
                  +------   handle data <------------------------   copy finsh  ------+

      Note:

        优点: 能够在等待任务完成的时间里完成其他任务

        缺点: 任务完成的响应延迟增加, 因为轮询READ

    3': 多路复用IO(也称为Event Driver IO)

        IO多路复用有两个特别的系统调用: select、poll、epoll.

        select是内核级别的, select轮询相对非阻塞的轮询的区别在于: select可轮询多个socket实现同时对多个IO端口进行监听. 任何socket

        的数据准好了就能返回进行可读, 然后进程再进行recvform系统调用将数据由内核拷贝到用户进程, 当然这个过程是阻塞的.

        select或poll调用之后会阻塞进程, 与blocking IO阻塞不同在于: 此时的select不是等socket数据全部到达再处理而是有了部分数据就会

        调用用户进程来处理(Socket数据由系统内核监视).

        Note:

          a: 用户进程调用select系统调用则用户进程会被阻塞, 直到系统内核监控到有数据, select操作返回. 用户进程调用read操作将数据从

             内核拷贝到用户进程

          b: 若是连接数不是很高, 多路复用IO并一定比同步非阻塞性能更好

                              应用进程                              内核
                                               System call
                      +-----  select()  -----------------------> no ready data  -------+
                      |                                               |                |
                      |                                               |                |
        select socket |                                               |                |  wait data
        and process   |                                               |                |
        block         |                         Return               \|/               |
                      +-----            <-----------------------   ready data   -------+
                                              System call
                      +----- recvfrom() ------------------------>  copy data    -------+
                      |                                               |                |
        copy data and |                                               |                | copy data from kernel
        process block |                                               |                | to user space
                      |                          Return              \|/               |
                      +----- handle data <----------------------   copy finsh   -------+


    4': 信号驱动IO



  2: 异步IO模型

    用户进程调用aio_read系统调用后, 无论内核数据是否准备好都会直接返回给用户进程. 当socket数据准备好, 内核直接复制数据给进程, 如下:

                             应用进程                               内核
                                             System call
                    +----               -------------------->   no ready data   ------+
                    |      aio_read()          return                |                |
                    |                   <--------------------        |                | wait data
    process execute |                                                |                |
                    |                                               \|/               |
                    |                                            ready data      -----+
                    |
                    |                                            copy data       -----+
                    |                                                |                |
                    |                                                |                |copy data from kernel
                    |                                                |                |to user space
                    |                     submit aio_read's         \|/               |
                    +---- handle data   <-------------------    copy finsh       -----+
                                              signal
    描述:

    用户进程调用aio_read()后立刻就可以开始去做其它的事. 当内核接收到asynchronous read后它会立刻返回并不会阻塞用户进程. 内核会等待

    数据准备完成, 将准备完成的数据拷贝到用户内存. 拷贝完成后内核会给用户进程发送signal或执行基于线程的回调函数来完成这次IO处理过程, 告

    诉它read操作完成.